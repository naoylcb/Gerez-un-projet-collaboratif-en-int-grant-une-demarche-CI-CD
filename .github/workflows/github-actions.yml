name: GitHub Actions

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, edited, reopened, synchronize]
    branches:
      - main

jobs:
  front-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: front/package-lock.json
    - name: Install dependencies
      working-directory: ./front
      run: npm ci
    - name: Run tests
      working-directory: ./front
      run: |
        cp karma.conf.js karma-lcov.conf.js
        sed -i 's/{ type: '\''text-summary'\'' }/{ type: '\''text-summary'\'' },\n        { type: '\''lcov'\'' }/' karma-lcov.conf.js
        npm test -- --no-watch --no-progress --browsers=ChromeHeadless --code-coverage --karma-config karma-lcov.conf.js
    - name: Archive test coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: front/coverage/

  back-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: 'maven'
    - name: Install dependencies
      working-directory: ./back
      run: mvn clean install
    - name: Run tests
      working-directory: ./back
      run: mvn clean test
    - name: Archive JaCoCo coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: jacoco-report
        path: back/target/site/jacoco/

  front-quality:
      needs: [front-test, back-test]
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
        - name: Download coverage report
          uses: actions/download-artifact@v4
          with:
            name: coverage-report
            path: front/coverage
        - name: SonarQube Scan
          uses: SonarSource/sonarqube-scan-action@v4
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          with:
            args: >
              -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
              -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY_FRONT }}
              -Dsonar.javascript.lcov.reportPaths=front/coverage/bobapp/lcov.info
              -Dsonar.sources=front/src/app
              -Dsonar.tests=front/src
              -Dsonar.test.inclusions=**/*.spec.ts
        - name: SonarQube Quality Gate check
          uses: sonarsource/sonarqube-quality-gate-action@master
          with:
            pollingTimeoutSec: 600
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  back-quality:
      needs: front-quality
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
        - name: Set up JDK 11
          uses: actions/setup-java@v4
          with:
            java-version: '11'
            distribution: 'temurin'
            cache: 'maven'
        - name: Download JaCoCo report artifact
          uses: actions/download-artifact@v4
          with:
            name: jacoco-report
            path: back/target/site/jacoco/
        - name: SonarQube Scan
          working-directory: ./back
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          run: |
            mvn -B verify \
              org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
              -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY_BACK }} \
              -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
        - name: SonarQube Quality Gate check
          uses: sonarsource/sonarqube-quality-gate-action@master
          with:
            pollingTimeoutSec: 600
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


  docker:
    needs: back-quality
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
        - name: Build and push front
          uses: docker/build-push-action@v6
          with:
            context: ./front
            push: true
            tags: yoanb/bobapp-front:${{ github.sha }}
        - name: Build and push back
          uses: docker/build-push-action@v6
          with:
            context: ./back
            push: true
            tags: yoanb/bobapp-back:${{ github.sha }}
